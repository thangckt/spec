### NOTE: schedule-strigger can only run on `default` branch.
name: Update versions of multiple .spec files

on:  # Trigger manually or on a schedule (e.g., weekly)
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday at midnight

jobs:
  update-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Central Repository
        uses: actions/checkout@v4
        with:
          ref: dev    # Selected branch, default is `main`

    ### Update the .spec files (this creates file `changed_specs.txt`)
      - name: Update .spec files
        run: |
          bash 0update_spec_version.sh

    ### Update the repository (commit change on selected branch)
      - name: Commit and Push Changes on selected branch      # Commit all changed files back to the repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto update versions of multiple .spec files"


    ### Update multiple branches: each branch for each .spec file
      - name: Push updates to multiple branches
        if: success()
        run: |
          while IFS= read -r spec; do
            pkg=$(basename "$spec" .spec)
            branch="copr_spec/${pkg}"

            echo "==> Updating branch $branch for $spec"

            ## Ensure local changes are committed before switching
            git stash push -u -m "temp" || true

            ## Fetch and switch to the target branch (create if missing)
            if git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
              git checkout "$branch"
              git pull origin "$branch" --ff-only
            else
              git checkout -b "$branch" origin/dev || git checkout -b "$branch"
            fi

            ## Restore the updated spec file
            git checkout dev -- "$spec"

            ## Commit and push if changed
            if ! git diff --quiet -- "$spec"; then
              git add "$spec"
              git commit -m "Auto update ${pkg}.spec from dev"
              git push origin "$branch"
            else
              echo "No changes for $spec in $branch"
            fi

            git checkout dev
            git stash pop || true
          done < changed_specs.txt