### NOTE: schedule-strigger can only run on `default` branch.
name: Update versions of multiple .spec files

on:  # Trigger manually or on a schedule (e.g., weekly)
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday at midnight

jobs:
  update-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Central Repository
        uses: actions/checkout@v4
        with:
          ref: dev    # Selected branch, default is `main`

    ### Update the .spec files (this creates file `changed_specs.txt`)
      - name: Update .spec files
        run: |
          bash 0update_spec_version.sh

    ### Update the repository (commit change on selected branch)
      - name: Commit and Push Changes on selected branch      # Commit all changed files back to the repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto update versions of multiple .spec files"


    ### Update multiple branches: each branch for each .spec file
      - name: Push updates to multiple branches
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          while IFS= read -r spec; do
            [ -z "$spec" ] && continue
            pkg=$(basename "$spec" .spec)
            branch="copr_spec/${pkg}"

            ## Create or switch to the branch
            if git ls-remote --exit-code origin "refs/heads/$branch" >/dev/null 2>&1; then
              git checkout "$branch"
              git pull origin "$branch" --ff-only
            else
              git checkout -b "$branch" dev
            fi

            ## Copy updated spec file from dev (now exists in working tree)
            cp "$spec" "$spec"

            if ! git diff --quiet -- "$spec"; then
              git add "$spec"
              git commit -m "Auto update ${pkg}.spec from dev"
              git push origin "$branch"
            else
              echo "No changes for $spec in $branch"
            fi

            git checkout dev
          done < changed_specs.txt